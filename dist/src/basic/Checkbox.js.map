{"version":3,"sources":["../../../src/basic/Checkbox.js"],"names":["CheckBox","variables","checkStyle","borderColor","props","color","checkboxBgColor","backgroundColor","checked","defaultProps","style","getInitialStyle","context","theme","platformStyle","platform","_root","c","prepareRootProps","checkboxTickColor","fontSize","CheckboxFontSize","lineHeight","CheckboxIconSize","marginTop","CheckboxIconMarginTop","textShadowRadius","contextTypes","object","propTypes","oneOfType","number","array","bool","onPress","func","StyledCheckBox"],"mappings":"21BAAA,4B,2CACA,qC,mDACA,yCACA,4D,iDACA,iEACA,mE,yEACA,qD,iDACA,8B,6CACA,mD,67BAEMA,S,0SAKYC,S,CAAW,CACzB,MAAO,CACLC,WAAY,CACVC,YAAa,KAAKC,KAAL,CAAWC,KAAX,CAAmB,KAAKD,KAAL,CAAWC,KAA9B,CAAsCJ,UAAUK,eADnD,CAEVC,gBACE,KAAKH,KAAL,CAAWI,OAAX,GAAuB,IAAvB,CACI,KAAKJ,KAAL,CAAWC,KAAX,CAAmB,KAAKD,KAAL,CAAWC,KAA9B,CAAsCJ,UAAUK,eADpD,CAEI,aALI,CADP,CAAP,CASD,C,0DAEgBL,S,CAAW,CAC1B,GAAMQ,cAAe,CACnBC,MAAO,KAAKC,eAAL,CAAqBV,SAArB,EAAgCC,UADpB,CAArB,CAIA,MAAO,2BAAa,KAAKE,KAAlB,CAAyBK,YAAzB,CAAP,CACD,C,uCACQ,iBACP,GAAMR,WAAY,KAAKW,OAAL,CAAaC,KAAb,CAAqB,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDZ,SAAtE,mBAAlB,CACA,GAAMa,eAAgBb,UAAUa,aAAhC,CACA,GAAMC,UAAWd,UAAUc,QAA3B,CACA,MACE,uEAAkB,IAAK,sBAAM,QAAKC,KAAL,CAAaC,CAAnB,EAAvB,EAAkD,KAAKC,gBAAL,CAAsBjB,SAAtB,CAAlD,mDACE,kDACE,MAAO,CACLI,MAAO,KAAKD,KAAL,CAAWI,OAAX,GAAuB,IAAvB,CAA8BP,UAAUkB,iBAAxC,CAA4D,aAD9D,CAELC,SAAUnB,UAAUoB,gBAFf,CAGLC,WAAYrB,UAAUsB,gBAHjB,CAILC,UAAWvB,UAAUwB,qBAJhB,CAKLC,iBAAkB,CALb,CADT,CAQE,KAAMX,WAAa,KAAb,EAAsBD,gBAAkB,UAAxC,CAAqD,eAArD,CAAuE,cAR/E,iDADF,CADF,CAcD,C,wCA1CGd,Q,CACG2B,Y,CAAe,CACpBd,MAAO,oBAAUe,MADG,C,CA4CxB5B,SAAS6B,SAAT,aACK,8BAAiBA,SADtB,EAEEnB,MAAO,oBAAUoB,SAAV,CAAoB,CAAC,oBAAUF,MAAX,CAAmB,oBAAUG,MAA7B,CAAqC,oBAAUC,KAA/C,CAApB,CAFT,CAGExB,QAAS,oBAAUyB,IAHrB,CAIEC,QAAS,oBAAUC,IAJrB,GAOA,GAAMC,gBAAiB,yCAAa,qBAAb,CAAoC,EAApC,iCAA8DpC,QAA9D,CAAvB,C,QAE2BA,Q,CAAlBoC,c","file":"Checkbox.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TouchableOpacity, Platform } from \"react-native\";\r\nimport IconNB from \"react-native-vector-icons/Ionicons\";\r\nimport { connectStyle } from \"native-base-shoutem-theme\";\r\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\r\nimport variable from \"../theme/variables/platform\";\r\nimport _ from \"lodash\";\r\nimport computeProps from \"../utils/computeProps\";\r\n\r\nclass CheckBox extends Component {\r\n  static contextTypes = {\r\n    theme: PropTypes.object,\r\n  };\r\n\r\n  getInitialStyle(variables) {\r\n    return {\r\n      checkStyle: {\r\n        borderColor: this.props.color ? this.props.color : variables.checkboxBgColor,\r\n        backgroundColor:\r\n          this.props.checked === true\r\n            ? this.props.color ? this.props.color : variables.checkboxBgColor\r\n            : \"transparent\",\r\n      },\r\n    };\r\n  }\r\n\r\n  prepareRootProps(variables) {\r\n    const defaultProps = {\r\n      style: this.getInitialStyle(variables).checkStyle,\r\n    };\r\n\r\n    return computeProps(this.props, defaultProps);\r\n  }\r\n  render() {\r\n    const variables = this.context.theme ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables : variable;\r\n    const platformStyle = variables.platformStyle;\r\n    const platform = variables.platform;\r\n    return (\r\n      <TouchableOpacity ref={c => (this._root = c)} {...this.prepareRootProps(variables)}>\r\n        <IconNB\r\n          style={{\r\n            color: this.props.checked === true ? variables.checkboxTickColor : \"transparent\",\r\n            fontSize: variables.CheckboxFontSize,\r\n            lineHeight: variables.CheckboxIconSize,\r\n            marginTop: variables.CheckboxIconMarginTop,\r\n            textShadowRadius: 0\r\n          }}\r\n          name={platform === \"ios\" && platformStyle !== \"material\" ? \"ios-checkmark\" : \"md-checkmark\"}\r\n        />\r\n      </TouchableOpacity>\r\n    );\r\n  }\r\n}\r\n\r\nCheckBox.propTypes = {\r\n  ...TouchableOpacity.propTypes,\r\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\r\n  checked: PropTypes.bool,\r\n  onPress: PropTypes.func,\r\n};\r\n\r\nconst StyledCheckBox = connectStyle(\"NativeBase.CheckBox\", {}, mapPropsToStyleNames)(CheckBox);\r\n\r\nexport { StyledCheckBox as CheckBox };\r\n"]}