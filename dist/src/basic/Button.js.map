{"version":3,"sources":["../../../src/basic/Button.js"],"names":["Button","borderedBtn","borderWidth","props","bordered","undefined","borderRadius","rounded","borderRadiusLarge","defaultProps","style","getInitialStyle","variables","context","theme","children","OS","Children","map","child","type","cloneElement","uppercase","btnUppercaseAndroidText","androidRipple","prepareRootProps","_root","c","activeOpacity","buttonStyle","buttonFlex","full","block","flex","maxHeight","height","paddingTop","paddingBottom","androidRippleColor","Ripple","styles","childContainer","flexGrow","onPress","transparent","contextTypes","object","propTypes","oneOfType","number","array","bool","primary","success","danger","warning","info","disabled","large","small","active","create","flexShrink","flexDirection","justifyContent","alignItems","StyledButton"],"mappings":"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","file":"Button.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  TouchableOpacity,\r\n  Platform,\r\n  View,\r\n  TouchableNativeFeedback,\r\n  StyleSheet\r\n} from \"react-native\";\r\nimport { connectStyle } from \"native-base-shoutem-theme\";\r\nimport variable from \"./../theme/variables/platform\";\r\nimport { Text } from \"./Text\";\r\nimport computeProps from \"../utils/computeProps\";\r\n\r\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\r\n\r\nclass Button extends Component {\r\n  static contextTypes = {\r\n    theme: PropTypes.object\r\n  };\r\n\r\n  getInitialStyle() {\r\n    return {\r\n      borderedBtn: {\r\n        borderWidth: this.props.bordered ? 1 : undefined,\r\n        borderRadius:\r\n          this.props.rounded && this.props.bordered\r\n            ? variable.borderRadiusLarge\r\n            : 2\r\n      }\r\n    };\r\n  }\r\n\r\n  _root: React$Element<TouchableOpacity | TouchableNativeFeedback>;\r\n\r\n  prepareRootProps() {\r\n    const defaultProps = {\r\n      style: this.getInitialStyle().borderedBtn\r\n    };\r\n\r\n    return computeProps(this.props, defaultProps);\r\n  }\r\n  render() {\r\n    const variables = this.context.theme\r\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\r\n      : variable;\r\n    const children =\r\n      Platform.OS === \"ios\"\r\n        ? this.props.children\r\n        : React.Children.map(\r\n          this.props.children,\r\n          child =>\r\n            child && child.type === Text\r\n              ? React.cloneElement(child, {\r\n                uppercase: variables.btnUppercaseAndroidText,\r\n                ...child.props\r\n              })\r\n              : child\r\n        );\r\n    if (\r\n      Platform.OS === \"ios\" ||\r\n      Platform.OS === \"web\" ||\r\n      variables.androidRipple === false ||\r\n      Platform[\"Version\"] < 21\r\n    ) {\r\n      return (\r\n        <TouchableOpacity\r\n          {...this.prepareRootProps()}\r\n          ref={c => (this._root = c)}\r\n          activeOpacity={\r\n            this.props.activeOpacity > 0 ? this.props.activeOpacity : 0.5\r\n          }\r\n        >\r\n          {children}\r\n        </TouchableOpacity>\r\n      );\r\n    } else {\r\n      if (this.props.rounded) {\r\n        let buttonStyle = { ...this.prepareRootProps().style };\r\n        let buttonFlex = (this.props.full || this.props.block) ? 1 : buttonStyle.flex;\r\n        return (\r\n          <View style={[{ maxHeight: buttonStyle.height }, buttonStyle, { paddingTop: undefined, paddingBottom: undefined }]} >\r\n            <TouchableNativeFeedback\r\n              ref={c => (this._root = c)}\r\n              background={\r\n                this.props.androidRippleColor\r\n                  ? TouchableNativeFeedback.Ripple(this.props.androidRippleColor, true)\r\n                  : TouchableNativeFeedback.Ripple(variables.androidRippleColor, true)\r\n              }\r\n              {...this.prepareRootProps()}\r\n            >\r\n              <View style={[styles.childContainer, { paddingTop: buttonStyle.paddingTop, paddingBottom: buttonStyle.paddingBottom, height: buttonStyle.height, flexGrow: buttonFlex }]}>\r\n                {children}\r\n              </View>\r\n            </TouchableNativeFeedback>\r\n          </View >\r\n        );\r\n      } else {\r\n        return (\r\n          <TouchableNativeFeedback\r\n            ref={c => (this._root = c)}\r\n            onPress={this.props.onPress}\r\n            background={this.props.transparent ? TouchableNativeFeedback.Ripple('transparent') : undefined}\r\n            {...this.prepareRootProps()}\r\n          >\r\n            <View {...this.prepareRootProps()}>{children}</View>\r\n          </TouchableNativeFeedback>\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nButton.propTypes = {\r\n  ...TouchableOpacity.propTypes,\r\n  style: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.number,\r\n    PropTypes.array\r\n  ]),\r\n  block: PropTypes.bool,\r\n  primary: PropTypes.bool,\r\n  transparent: PropTypes.bool,\r\n  success: PropTypes.bool,\r\n  danger: PropTypes.bool,\r\n  warning: PropTypes.bool,\r\n  info: PropTypes.bool,\r\n  bordered: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  rounded: PropTypes.bool,\r\n  large: PropTypes.bool,\r\n  small: PropTypes.bool,\r\n  active: PropTypes.bool\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  childContainer: {\r\n    flexShrink: 1,\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  },\r\n});\r\n\r\nconst StyledButton = connectStyle(\r\n  \"NativeBase.Button\",\r\n  {},\r\n  mapPropsToStyleNames\r\n)(Button);\r\nexport { StyledButton as Button };\r\n"]}