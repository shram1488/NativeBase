{"version":3,"sources":["../../../src/basic/Card.js"],"names":["Card","props","dataArray","renderRow","ds","DataSource","rowHasChanged","r1","r2","dataSource","cloneWithRows","_root","c","children","propTypes","style","oneOfType","object","number","array","func","StyledCard"],"mappings":"m1BAAA,4B,2CACA,qC,mDACA,yCAEA,iEACA,mE,68BAEMA,K,iQACK,iBACP,GAAI,KAAKC,KAAL,CAAWC,SAAX,EAAwB,KAAKD,KAAL,CAAWE,SAAvC,CAAkD,CAChD,GAAMC,IAAK,GAAI,uBAASC,UAAb,CAAwB,CACjCC,cAAe,uBAACC,EAAD,CAAKC,EAAL,QAAYD,MAAOC,EAAnB,EADkB,CAAxB,CAAX,CAGA,GAAMC,YAAaL,GAAGM,aAAH,CAAiB,KAAKT,KAAL,CAAWC,SAA5B,CAAnB,CACA,MACE,iEACM,KAAKD,KADX,EAEE,wBAFF,CAGE,WAAYQ,UAHd,CAIE,UAAW,KAAKR,KAAL,CAAWE,SAJxB,kDADF,CAQD,CACD,MACE,2DAAM,IAAK,sBAAM,QAAKQ,KAAL,CAAaC,CAAnB,EAAX,EAAsC,KAAKX,KAA3C,mDACG,KAAKA,KAAL,CAAWY,QADd,CADF,CAKD,C,oCAGHb,KAAKc,SAAL,yCAEEC,MAAO,oBAAUC,SAAV,CAAoB,CACzB,oBAAUC,MADe,CAEzB,oBAAUC,MAFe,CAGzB,oBAAUC,KAHe,CAApB,CAFT,CAOEjB,UAAW,oBAAUiB,KAPvB,CAQEhB,UAAW,oBAAUiB,IARvB,GAWA,GAAMC,YAAa,yCAAa,iBAAb,CAAgC,EAAhC,iCACjBrB,IADiB,CAAnB,C,QAIuBA,I,CAAdqB,U","file":"Card.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { View, ListView, ViewPropTypes } from \"react-native\";\r\n\r\nimport { connectStyle } from \"native-base-shoutem-theme\";\r\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    if (this.props.dataArray && this.props.renderRow) {\r\n      const ds = new ListView.DataSource({\r\n        rowHasChanged: (r1, r2) => r1 !== r2\r\n      });\r\n      const dataSource = ds.cloneWithRows(this.props.dataArray);\r\n      return (\r\n        <ListView\r\n          {...this.props}\r\n          enableEmptySections\r\n          dataSource={dataSource}\r\n          renderRow={this.props.renderRow}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <View ref={c => (this._root = c)} {...this.props}>\r\n        {this.props.children}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nCard.propTypes = {\r\n  ...ViewPropTypes,\r\n  style: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.number,\r\n    PropTypes.array\r\n  ]),\r\n  dataArray: PropTypes.array,\r\n  renderRow: PropTypes.func\r\n};\r\n\r\nconst StyledCard = connectStyle(\"NativeBase.Card\", {}, mapPropsToStyleNames)(\r\n  Card\r\n);\r\n\r\nexport { StyledCard as Card };\r\n"]}