{"version":3,"sources":["../../../src/basic/DatePicker.js"],"names":["DatePicker","props","componentDidMount","setState","defaultDate","Date","disabled","placeHolderText","chosenDate","state","modalVisible","undefined","date","onDateChange","OS","openAndroidDatePicker","open","minDate","minimumDate","maxDate","maximumDate","mode","androidMode","newDate","action","year","month","day","selectedDate","code","message","console","warn","formatChosenDate","getDate","getMonth","getFullYear","join","variables","context","theme","showDatePicker","bind","padding","color","datePickerTextColor","textStyle","placeHolderTextStyle","animationType","modalTransparent","backgroundColor","datePickerBg","flex","setDate","locale","timeZoneOffsetInMinutes","Component"],"mappings":"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","file":"DatePicker.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Modal,\r\n  View,\r\n  Platform,\r\n  DatePickerIOS,\r\n  DatePickerAndroid\r\n} from \"react-native\";\r\nimport { Text } from \"native-base\";\r\nimport variable from \"../theme/variables/platform\";\r\n\r\nexport class DatePicker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modalVisible: false,\r\n      defaultDate: new Date(),\r\n      chosenDate: undefined,\r\n      disabled: true\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.setState({\r\n      defaultDate: this.props.defaultDate ? this.props.defaultDate : new Date(),\r\n      disabled: this.props.disabled ? true : false\r\n    });\r\n    if (!this.props.placeHolderText && this.props.defaultDate) {\r\n      this.setState({ chosenDate: this.props.defaultDate })\r\n    }\r\n  };\r\n\r\n  setDate(date) {\r\n    this.setState({ chosenDate: new Date(date) });\r\n    if (this.props.onDateChange) {\r\n      this.props.onDateChange(date);\r\n    }\r\n  }\r\n\r\n  showDatePicker() {\r\n    if (Platform.OS === \"android\") {\r\n      this.openAndroidDatePicker();\r\n    } else {\r\n      this.setState({ modalVisible: true });\r\n    }\r\n  }\r\n\r\n  async openAndroidDatePicker() {\r\n    try {\r\n      const newDate = await DatePickerAndroid.open({\r\n        date: this.state.chosenDate\r\n          ? this.state.chosenDate\r\n          : this.state.defaultDate,\r\n        minDate: this.props.minimumDate,\r\n        maxDate: this.props.maximumDate,\r\n        mode: this.props.androidMode\r\n      });\r\n      const { action, year, month, day } = newDate;\r\n      if (action === \"dateSetAction\") {\r\n        let selectedDate = new Date(year, month, day);\r\n        this.setState({ chosenDate: selectedDate });\r\n        this.props.onDateChange(selectedDate);\r\n      }\r\n    } catch ({ code, message }) {\r\n      console.warn(\"Cannot open date picker\", message);\r\n    }\r\n  }\r\n\r\n  formatChosenDate(date) {\r\n    if (this.props.formatChosenDate) {\r\n      return this.props.formatChosenDate(date);\r\n    }\r\n    return [\r\n      date.getDate(),\r\n      date.getMonth() + 1,\r\n      date.getFullYear(),\r\n    ].join('/');\r\n  }\r\n\r\n  render() {\r\n    const variables = this.context.theme\r\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\r\n      : variable;\r\n    return (\r\n      <View>\r\n        <View>\r\n          <Text\r\n            onPress={!this.state.disabled ? this.showDatePicker.bind(this) : undefined}\r\n            style={[\r\n              { padding: 10, color: variables.datePickerTextColor },\r\n              this.state.chosenDate ? this.props.textStyle : this.props.placeHolderTextStyle\r\n            ]}\r\n          >\r\n            {this.state.chosenDate\r\n              ? this.formatChosenDate(this.state.chosenDate)\r\n              : this.props.placeHolderText\r\n                ? this.props.placeHolderText\r\n                : \"Select Date\"}\r\n          </Text>\r\n          <View>\r\n            <Modal\r\n              supportedOrientations={['portrait', 'landscape']}\r\n              animationType={this.props.animationType}\r\n              transparent={this.props.modalTransparent} //from api\r\n              visible={this.state.modalVisible}\r\n              onRequestClose={() => { }}\r\n            >\r\n              <Text\r\n                onPress={() => this.setState({ modalVisible: false })}\r\n                style={{ backgroundColor: variables.datePickerBg, flex: 1 }}\r\n              />\r\n              <DatePickerIOS\r\n                date={\r\n                  this.state.chosenDate\r\n                    ? this.state.chosenDate\r\n                    : this.state.defaultDate\r\n                }\r\n                onDateChange={this.setDate.bind(this)}\r\n                minimumDate={this.props.minimumDate}\r\n                maximumDate={this.props.maximumDate}\r\n                mode=\"date\"\r\n                locale={this.props.locale}\r\n                timeZoneOffsetInMinutes={this.props.timeZoneOffsetInMinutes}\r\n              />\r\n            </Modal>\r\n          </View>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n"]}