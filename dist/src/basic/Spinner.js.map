{"version":3,"sources":["../../../src/basic/Spinner.js"],"names":["Spinner","variables","context","theme","_root","c","props","color","inverse","inverseSpinnerColor","defaultSpinnerColor","size","contextTypes","object","propTypes","string","bool","StyledSpinner"],"mappings":"y1BAAA,4B,2CACA,qC,mDACA,yCAEA,iEACA,qD,iDACA,mE,68BAEMA,Q,mRAII,iBACR,GAAMC,WAAY,KAAKC,OAAL,CAAaC,KAAb,CAAqB,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SAAtE,mBAAlB,CACA,MACC,wEACC,IAAK,sBAAM,QAAKG,KAAL,CAAaC,CAAnB,EADN,EAEK,KAAKC,KAFV,EAGC,MACC,KAAKA,KAAL,CAAWC,KAAX,CACG,KAAKD,KAAL,CAAWC,KADd,CAEG,KAAKD,KAAL,CAAWE,OAAX,CAAqBP,UAAUQ,mBAA/B,CAAqDR,UAAUS,mBANpE,CAQC,KAAM,KAAKJ,KAAL,CAAWK,IAAX,CAAkB,KAAKL,KAAL,CAAWK,IAA7B,CAAoC,OAR3C,kDADD,CAYA,C,uCAlBIX,O,CACEY,Y,CAAe,CACrBT,MAAO,oBAAUU,MADI,C,CAoBvBb,QAAQc,SAAR,aACI,+BAAkBA,SADtB,EAECP,MAAO,oBAAUQ,MAFlB,CAGCP,QAAS,oBAAUQ,IAHpB,GAMA,GAAMC,eAAgB,yCAAa,oBAAb,CAAmC,EAAnC,iCAA6DjB,OAA7D,CAAtB,C,QAE0BA,O,CAAjBiB,a","file":"Spinner.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ActivityIndicator } from \"react-native\";\r\n\r\nimport { connectStyle } from \"native-base-shoutem-theme\";\r\nimport variable from \"../theme/variables/platform\";\r\nimport mapPropsToStyleNames from \"../utils/mapPropsToStyleNames\";\r\n\r\nclass Spinner extends Component {\r\n\tstatic contextTypes = {\r\n\t\ttheme: PropTypes.object,\r\n\t};\r\n\trender() {\r\n\t\tconst variables = this.context.theme ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables : variable;\r\n\t\treturn (\r\n\t\t\t<ActivityIndicator\r\n\t\t\t\tref={c => (this._root = c)}\r\n\t\t\t\t{...this.props}\r\n\t\t\t\tcolor={\r\n\t\t\t\t\tthis.props.color\r\n\t\t\t\t\t\t? this.props.color\r\n\t\t\t\t\t\t: this.props.inverse ? variables.inverseSpinnerColor : variables.defaultSpinnerColor\r\n\t\t\t\t}\r\n\t\t\t\tsize={this.props.size ? this.props.size : \"large\"}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nSpinner.propTypes = {\r\n\t...ActivityIndicator.propTypes,\r\n\tcolor: PropTypes.string,\r\n\tinverse: PropTypes.bool,\r\n};\r\n\r\nconst StyledSpinner = connectStyle(\"NativeBase.Spinner\", {}, mapPropsToStyleNames)(Spinner);\r\n\r\nexport { StyledSpinner as Spinner };\r\n"]}