{"version":3,"sources":["../../../__tests__/basic/Header.android.js"],"names":["jest","mock","Platform","require","requireActual","OS","it","tree","create","toJSON","expect","toMatchSnapshot","backgroundColor","color"],"mappings":"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","file":"Header.android.js","sourcesContent":["import \"react-native\";\r\nimport React from \"react\";\r\nimport renderer from \"react-test-renderer\";\r\nimport { Container } from \"./../../src/basic/Container\";\r\nimport { Header } from \"./../../src/basic/Header\";\r\nimport { Left } from \"./../../src/basic/Left\";\r\nimport { Button } from \"./../../src/basic/Button\";\r\nimport { Icon } from \"./../../src/basic/Icon\";\r\nimport { Body } from \"./../../src/basic/Body\";\r\nimport { Title } from \"./../../src/basic/Title\";\r\nimport { Subtitle } from \"./../../src/basic/Subtitle\";\r\nimport { Right } from \"./../../src/basic/Right\";\r\nimport { Content } from \"./../../src/basic/Content\";\r\nimport { Text } from \"./../../src/basic/Text\";\r\n\r\n// Note: test renderer must be required after react-native.\r\n\r\njest.mock(\"Platform\", () => {\r\n  const Platform = require.requireActual(\"Platform\");\r\n  Platform.OS = \"android\";\r\n  return Platform;\r\n});\r\n\r\nit(\"renders Header with only Title\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Container>\r\n        <Header>\r\n          <Left />\r\n          <Body>\r\n            <Title>Header</Title>\r\n          </Body>\r\n          <Right />\r\n        </Header>\r\n      </Container>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders Header with Icon Buttons\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Container>\r\n        <Header>\r\n          <Left>\r\n            <Button transparent>\r\n              <Icon name=\"arrow-back\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Title>Header</Title>\r\n          </Body>\r\n          <Right>\r\n            <Button transparent>\r\n              <Icon name=\"menu\" />\r\n            </Button>\r\n          </Right>\r\n        </Header>\r\n      </Container>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders Header with Text Buttons\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Container>\r\n        <Header>\r\n          <Left>\r\n            <Button hasText transparent>\r\n              <Text>Back</Text>\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Title>Header</Title>\r\n          </Body>\r\n          <Right>\r\n            <Button hasText transparent>\r\n              <Text>Cancel</Text>\r\n            </Button>\r\n          </Right>\r\n        </Header>\r\n      </Container>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders Header with Icon Button & Text Button\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Container>\r\n        <Header>\r\n          <Left>\r\n            <Button transparent>\r\n              <Icon name=\"arrow-back\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Title>Header</Title>\r\n          </Body>\r\n          <Right>\r\n            <Button hasText transparent>\r\n              <Text>Cancel</Text>\r\n            </Button>\r\n          </Right>\r\n        </Header>\r\n      </Container>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders Header with Icon & Text Button\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Container>\r\n        <Header>\r\n          <Left>\r\n            <Button transparent>\r\n              <Icon name=\"arrow-back\" />\r\n              <Text>Back</Text>\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Title>Header</Title>\r\n          </Body>\r\n          <Right>\r\n            <Button hasText transparent>\r\n              <Text>Cancel</Text>\r\n            </Button>\r\n          </Right>\r\n        </Header>\r\n      </Container>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders Header with multiple Icon Button\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Container>\r\n        <Header>\r\n          <Left>\r\n            <Button transparent>\r\n              <Icon name=\"arrow-back\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Title>Header</Title>\r\n          </Body>\r\n          <Right>\r\n            <Button transparent>\r\n              <Icon name=\"search\" />\r\n            </Button>\r\n            <Button transparent>\r\n              <Icon name=\"heart\" />\r\n            </Button>\r\n            <Button transparent>\r\n              <Icon name=\"more\" />\r\n            </Button>\r\n          </Right>\r\n        </Header>\r\n      </Container>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders Header with Title and Subtitle\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Container>\r\n        <Header hasSubtitle>\r\n          <Left>\r\n            <Button transparent>\r\n              <Icon name=\"arrow-back\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Title>Title</Title>\r\n            <Subtitle>Subtitle</Subtitle>\r\n          </Body>\r\n          <Right />\r\n        </Header>\r\n      </Container>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders Header with Custom background color\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Container>\r\n        <Header\r\n          style={{ backgroundColor: \"#dc4239\" }}\r\n          androidStatusBarColor=\"#dc2015\"\r\n          iosBarStyle=\"light-content\"\r\n        >\r\n          <Left>\r\n            <Button transparent>\r\n              <Icon name=\"arrow-back\" style={{ color: \"#FFF\" }} />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Title style={{ color: \"#FFF\" }}>Custom Header</Title>\r\n          </Body>\r\n          <Right />\r\n        </Header>\r\n      </Container>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders Header span\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Container>\r\n        <Header span>\r\n          <Left>\r\n            <Button transparent>\r\n              <Icon name=\"arrow-back\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Title>Header Span</Title>\r\n          </Body>\r\n          <Right />\r\n        </Header>\r\n      </Container>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders Header noShadow\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Container>\r\n        <Header noShadow>\r\n          <Left>\r\n            <Button transparent>\r\n              <Icon name=\"arrow-back\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Title>Header No Shadow</Title>\r\n          </Body>\r\n          <Right>\r\n            <Button transparent>\r\n              <Icon name=\"menu\" />\r\n            </Button>\r\n          </Right>\r\n        </Header>\r\n      </Container>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders Header noLeft\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Container>\r\n        <Header noLeft>\r\n          <Left>\r\n            <Button hasText transparent>\r\n              <Text>Back</Text>\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Title>Header</Title>\r\n          </Body>\r\n          <Right>\r\n            <Button hasText transparent>\r\n              <Text>Cancel</Text>\r\n            </Button>\r\n          </Right>\r\n        </Header>\r\n      </Container>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n"]}