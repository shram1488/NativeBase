{"version":3,"sources":["../../../__tests__/basic/Radio.android.js"],"names":["jest","mock","Platform","require","requireActual","OS","it","tree","create","toJSON","expect","toMatchSnapshot"],"mappings":"oDAAA,wBACA,4B,2CACA,sD,mEACA,kDACA,oDACA,4CACA,8CACA,4CACA,8C,mFAIAA,KAAKC,IAAL,CAAU,UAAV,CAAsB,UAAM,CAC1B,GAAMC,UAAWC,QAAQC,aAAR,CAAsB,UAAtB,CAAjB,CACAF,SAASG,EAAT,CAAc,SAAd,CACA,MAAOH,SAAP,CACD,CAJD,EAMAI,GAAG,uBAAH,CAA4B,UAAM,CAChC,GAAMC,MAAO,4BACVC,MADU,CAET,gGACE,kDAAU,SAAU,IAApB,iDACE,0FACE,wGADF,CADF,CAIE,4FACE,4CAAO,SAAU,IAAjB,iDADF,CAJF,CADF,CASE,kDAAU,SAAU,KAApB,iDACE,0FACE,2GADF,CADF,CAIE,4FACE,4CAAO,SAAU,KAAjB,iDADF,CAJF,CATF,CAFS,EAqBVC,MArBU,EAAb,CAsBAC,OAAOH,IAAP,EAAaI,eAAb,GACD,CAxBD,EA0BAL,GAAG,sBAAH,CAA2B,UAAM,CAC/B,GAAMC,MAAO,4BACVC,MADU,CAET,gGACE,kDAAU,SAAU,IAApB,iDACE,0FACE,wGADF,CADF,CAIE,4FACE,4CACE,SAAU,IADZ,CAEE,MAAO,SAFT,CAGE,cAAe,SAHjB,iDADF,CAJF,CADF,CAaE,kDAAU,SAAU,KAApB,iDACE,0FACE,2GADF,CADF,CAIE,4FACE,4CACE,SAAU,KADZ,CAEE,MAAO,SAFT,CAGE,cAAe,SAHjB,iDADF,CAJF,CAbF,CAFS,EA6BVC,MA7BU,EAAb,CA8BAC,OAAOH,IAAP,EAAaI,eAAb,GACD,CAhCD","file":"Radio.android.js","sourcesContent":["import \"react-native\";\r\nimport React from \"react\";\r\nimport renderer from \"react-test-renderer\";\r\nimport { Content } from \"./../../src/basic/Content\";\r\nimport { ListItem } from \"./../../src/basic/ListItem\";\r\nimport { Left } from \"./../../src/basic/Left\";\r\nimport { Right } from \"./../../src/basic/Right\";\r\nimport { Text } from \"./../../src/basic/Text\";\r\nimport { Radio } from \"./../../src/basic/Radio\";\r\n\r\n// Note: test renderer must be required after react-native.\r\n\r\njest.mock(\"Platform\", () => {\r\n  const Platform = require.requireActual(\"Platform\");\r\n  Platform.OS = \"android\";\r\n  return Platform;\r\n});\r\n\r\nit(\"renders default radio\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Content>\r\n        <ListItem selected={true}>\r\n          <Left>\r\n            <Text>Lunch Break</Text>\r\n          </Left>\r\n          <Right>\r\n            <Radio selected={true} />\r\n          </Right>\r\n        </ListItem>\r\n        <ListItem selected={false}>\r\n          <Left>\r\n            <Text>Daily Stand Up</Text>\r\n          </Left>\r\n          <Right>\r\n            <Radio selected={false} />\r\n          </Right>\r\n        </ListItem>\r\n      </Content>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders custom radio\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Content>\r\n        <ListItem selected={true}>\r\n          <Left>\r\n            <Text>Lunch Break</Text>\r\n          </Left>\r\n          <Right>\r\n            <Radio\r\n              selected={true}\r\n              color={\"#f0ad4e\"}\r\n              selectedColor={\"#5cb85c\"}\r\n            />\r\n          </Right>\r\n        </ListItem>\r\n        <ListItem selected={false}>\r\n          <Left>\r\n            <Text>Daily Stand Up</Text>\r\n          </Left>\r\n          <Right>\r\n            <Radio\r\n              selected={false}\r\n              color={\"#f0ad4e\"}\r\n              selectedColor={\"#5cb85c\"}\r\n            />\r\n          </Right>\r\n        </ListItem>\r\n      </Content>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n"]}