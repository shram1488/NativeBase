{"version":3,"sources":["../../../__tests__/basic/List.ios.js"],"names":["pratik","require","sanket","jest","mock","Platform","requireActual","OS","it","datas","tree","create","data","toJSON","expect","toMatchSnapshot","backgroundColor","img","text","note"],"mappings":"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","file":"List.ios.js","sourcesContent":["import \"react-native\";\r\nimport React from \"react\";\r\nimport renderer from \"react-test-renderer\";\r\nimport { List } from \"./../../src/basic/List\";\r\nimport { ListItem } from \"./../../src/basic/ListItem\";\r\nimport { Left } from \"./../../src/basic/Left\";\r\nimport { Body } from \"./../../src/basic/Body\";\r\nimport { Right } from \"./../../src/basic/Right\";\r\nimport { Icon } from \"./../../src/basic/Icon\";\r\nimport { Text } from \"./../../src/basic/Text\";\r\nimport { Button } from \"./../../src/basic/Button\";\r\nimport { Switch } from \"./../../src/basic/Switch\";\r\nimport { Radio } from \"./../../src/basic/Radio\";\r\nimport { Badge } from \"./../../src/basic/Badge\";\r\nimport { Thumbnail } from \"./../../src/basic/Thumbnail\";\r\nimport { Separator } from \"./../../src/basic/Separator\";\r\n\r\n// Note: test renderer must be required after react-native.\r\n\r\nconst pratik = require(\"../assets/pratik.png\");\r\nconst sanket = require(\"../assets/sanket.png\");\r\n\r\njest.mock(\"Platform\", () => {\r\n  const Platform = require.requireActual(\"Platform\");\r\n  Platform.OS = \"ios\";\r\n  return Platform;\r\n});\r\n\r\nit(\"renders Basic List\", () => {\r\n  const datas = [\r\n    \"Simon Mignolet\",\r\n    \"Nathaniel Clyne\",\r\n    \"Dejan Lovren\",\r\n    \"Mama Sakho\",\r\n    \"Alberto Moreno\",\r\n    \"Emre Can\",\r\n    \"Joe Allen\",\r\n    \"Phil Coutinho\"\r\n  ];\r\n  const tree = renderer\r\n    .create(\r\n      <List\r\n        dataArray={datas}\r\n        renderRow={data => (\r\n          <ListItem>\r\n            <Left>\r\n              <Text>{data}</Text>\r\n            </Left>\r\n            <Right>\r\n              <Icon name=\"arrow-forward\" />\r\n            </Right>\r\n          </ListItem>\r\n        )}\r\n      />\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders ListItem selected\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <List>\r\n        <ListItem selected>\r\n          <Text>Caroline Aaron</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Urbino Cendre</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Lee Allen</Text>\r\n        </ListItem>\r\n      </List>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders ListItem itemDivider\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <List>\r\n        <ListItem itemDivider>\r\n          <Text>A</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Aaron Bennet</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Ali Connors</Text>\r\n        </ListItem>\r\n        <ListItem last>\r\n          <Text>Angana Ghosh</Text>\r\n        </ListItem>\r\n\r\n        <ListItem itemDivider>\r\n          <Text>B</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Bradley Horowitz</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Brian Swetland</Text>\r\n        </ListItem>\r\n        <ListItem last>\r\n          <Text>Brittany Kelso</Text>\r\n        </ListItem>\r\n      </List>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders ListItem itemHeader\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <List>\r\n        <ListItem itemHeader first>\r\n          <Text>COMEDY</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Hangover</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Horrible Bosses</Text>\r\n        </ListItem>\r\n        <ListItem last>\r\n          <Text>Cop Out</Text>\r\n        </ListItem>\r\n\r\n        <ListItem itemHeader>\r\n          <Text>HORROR</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>The Evil Dead</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Residential Evil</Text>\r\n        </ListItem>\r\n        <ListItem last>\r\n          <Text>Conjuring</Text>\r\n        </ListItem>\r\n      </List>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders ListItem icon\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <List>\r\n        <ListItem icon>\r\n          <Left>\r\n            <Button style={{ backgroundColor: \"#FF9501\" }}>\r\n              <Icon active name=\"plane\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Text>Airplane Mode</Text>\r\n          </Body>\r\n          <Right>\r\n            <Switch value={false} onTintColor=\"#50B948\" />\r\n          </Right>\r\n        </ListItem>\r\n        <ListItem icon>\r\n          <Left>\r\n            <Button style={{ backgroundColor: \"#007AFF\" }}>\r\n              <Icon active name=\"bluetooth\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Text>Bluetooth</Text>\r\n          </Body>\r\n          <Right>\r\n            <Text>On</Text>\r\n            <Icon active name=\"arrow-forward\" />\r\n          </Right>\r\n        </ListItem>\r\n        <ListItem icon>\r\n          <Left>\r\n            <Button style={{ backgroundColor: \"#4CDA64\" }}>\r\n              <Icon active name=\"phone-portrait\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Text>Mobile Data</Text>\r\n          </Body>\r\n          <Right>\r\n            <Radio selected />\r\n          </Right>\r\n        </ListItem>\r\n        <ListItem icon>\r\n          <Left>\r\n            <Button style={{ backgroundColor: \"#FD3C2D\" }}>\r\n              <Icon active name=\"notifications\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Text>Notifications</Text>\r\n          </Body>\r\n          <Right>\r\n            <Icon active name=\"arrow-forward\" />\r\n          </Right>\r\n        </ListItem>\r\n        <ListItem icon last>\r\n          <Left>\r\n            <Button style={{ backgroundColor: \"#5855D6\" }}>\r\n              <Icon active name=\"moon\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Text>Do Not Disturb</Text>\r\n          </Body>\r\n          <Right>\r\n            <Text>Yes</Text>\r\n          </Right>\r\n        </ListItem>\r\n        <ListItem last icon>\r\n          <Left>\r\n            <Button style={{ backgroundColor: \"#8F8E93\" }}>\r\n              <Icon active name=\"cog\" />\r\n            </Button>\r\n          </Left>\r\n          <Body>\r\n            <Text>Software Update</Text>\r\n          </Body>\r\n          <Right>\r\n            <Badge style={{ backgroundColor: \"#FD3C2D\" }}>\r\n              <Text>2</Text>\r\n            </Badge>\r\n          </Right>\r\n        </ListItem>\r\n      </List>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders ListItem avatar\", () => {\r\n  const datas = [\r\n    {\r\n      img: pratik,\r\n      text: \"Kumar Pratik\",\r\n      note: \"Its time to build a difference . .\"\r\n    },\r\n    {\r\n      img: sanket,\r\n      text: \"Kumar Sanket\",\r\n      note: \"One needs courage to be happy and smiling all time . . \"\r\n    }\r\n  ];\r\n  const tree = renderer\r\n    .create(\r\n      <List\r\n        dataArray={datas}\r\n        renderRow={data => (\r\n          <ListItem thumbnail>\r\n            <Left>\r\n              <Thumbnail square size={55} source={data.img} />\r\n            </Left>\r\n            <Body>\r\n              <Text>{data.text}</Text>\r\n              <Text numberOfLines={1} note>\r\n                {data.note}\r\n              </Text>\r\n            </Body>\r\n            <Right>\r\n              <Button transparent>\r\n                <Text>View</Text>\r\n              </Button>\r\n            </Right>\r\n          </ListItem>\r\n        )}\r\n      />\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders ListItem thumbnail\", () => {\r\n  const datas = [\r\n    {\r\n      img: pratik,\r\n      text: \"Kumar Pratik\",\r\n      note: \"Its time to build a difference . .\"\r\n    },\r\n    {\r\n      img: sanket,\r\n      text: \"Kumar Sanket\",\r\n      note: \"One needs courage to be happy and smiling all time . . \"\r\n    }\r\n  ];\r\n  const tree = renderer\r\n    .create(\r\n      <List\r\n        dataArray={datas}\r\n        renderRow={data => (\r\n          <ListItem thumbnail>\r\n            <Left>\r\n              <Thumbnail square size={55} source={data.img} />\r\n            </Left>\r\n            <Body>\r\n              <Text>{data.text}</Text>\r\n              <Text numberOfLines={1} note>\r\n                {data.note}\r\n              </Text>\r\n            </Body>\r\n            <Right>\r\n              <Button transparent>\r\n                <Text>View</Text>\r\n              </Button>\r\n            </Right>\r\n          </ListItem>\r\n        )}\r\n      />\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders ListItem separator\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <List>\r\n        <Separator bordered>\r\n          <Text>MIDFIELD</Text>\r\n        </Separator>\r\n        <ListItem>\r\n          <Text>Caroline Aaron</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Urbino Cendre</Text>\r\n        </ListItem>\r\n        <ListItem last>\r\n          <Text>Lee Allen</Text>\r\n        </ListItem>\r\n\r\n        <Separator bordered>\r\n          <Text>MIDFIELD</Text>\r\n        </Separator>\r\n        <ListItem>\r\n          <Text>Caroline Aaron</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Urbino Cendre</Text>\r\n        </ListItem>\r\n        <ListItem last>\r\n          <Text>Lee Allen</Text>\r\n        </ListItem>\r\n      </List>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders ListItem noIndent\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <List>\r\n        <ListItem\r\n          noIndent\r\n          style={{\r\n            backgroundColor: \"#cde1f9\"\r\n          }}\r\n        >\r\n          <Text>Caroline Aaron</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Urbino Cendre</Text>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Text>Lee Allen</Text>\r\n        </ListItem>\r\n      </List>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n"]}