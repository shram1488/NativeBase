{"version":3,"sources":["../../../__tests__/basic/Toast.ios.js"],"names":["cover","require","jest","mock","Platform","requireActual","OS","it","tree","create","show","text","buttonText","toJSON","expect","toMatchSnapshot","buttonTextStyle","color","buttonStyle","backgroundColor","duration","position","textStyle","type"],"mappings":"gDAAA,wBACA,4B,2CACA,sD,mEACA,kDACA,gDACA,8CACA,4C,mFAGA,GAAMA,OAAQC,QAAQ,4BAAR,CAAd,CAEAC,KAAKC,IAAL,CAAU,UAAV,CAAsB,UAAM,CAC1B,GAAMC,UAAWH,QAAQI,aAAR,CAAsB,UAAtB,CAAjB,CACAD,SAASE,EAAT,CAAc,KAAd,CACA,MAAOF,SAAP,CACD,CAJD,EAMAG,GAAG,uBAAH,CAA4B,UAAM,CAChC,GAAMC,MAAO,4BACVC,MADU,CAET,8CACE,QAAS,yBACP,cAAMC,IAAN,CAAW,CACTC,KAAM,iBADG,CAETC,WAAY,MAFH,CAAX,CADO,EADX,iDAQE,kGARF,CAFS,EAaVC,MAbU,EAAb,CAcAC,OAAON,IAAP,EAAaO,eAAb,GACD,CAhBD,EAkBAR,GAAG,4BAAH,CAAiC,UAAM,CACrC,GAAMC,MAAO,4BACVC,MADU,CAET,8CACE,QAAS,yBACP,cAAMC,IAAN,CAAW,CACTC,KAAM,iBADG,CAETC,WAAY,MAFH,CAGTI,gBAAiB,CAAEC,MAAO,SAAT,CAHR,CAITC,YAAa,CAAEC,gBAAiB,SAAnB,CAJJ,CAAX,CADO,EADX,iDAUE,kGAVF,CAFS,EAeVN,MAfU,EAAb,CAgBAC,OAAON,IAAP,EAAaO,eAAb,GACD,CAlBD,EAoBAR,GAAG,6BAAH,CAAkC,UAAM,CACtC,GAAMC,MAAO,4BACVC,MADU,CAET,8CACE,QAAS,yBACP,cAAMC,IAAN,CAAW,CACTC,KAAM,iBADG,CAETC,WAAY,MAFH,CAGTQ,SAAU,IAHD,CAAX,CADO,EADX,iDASE,kGATF,CAFS,EAcVP,MAdU,EAAb,CAeAC,OAAON,IAAP,EAAaO,eAAb,GACD,CAjBD,EAmBAR,GAAG,wBAAH,CAA6B,UAAM,CACjC,GAAMC,MAAO,4BACVC,MADU,CAET,gDAAS,WAAT,iDACE,8CACE,QAAS,yBACP,cAAMC,IAAN,CAAW,CACTC,KAAM,iBADG,CAETC,WAAY,MAFH,CAGTS,SAAU,KAHD,CAAX,CADO,EADX,iDASE,sGATF,CADF,CAYE,8CACE,QAAS,yBACP,cAAMX,IAAN,CAAW,CACTC,KAAM,iBADG,CAETC,WAAY,MAFH,CAGTS,SAAU,QAHD,CAAX,CADO,EADX,iDASE,yGATF,CAZF,CAFS,EA2BVR,MA3BU,EAAb,CA4BAC,OAAON,IAAP,EAAaO,eAAb,GACD,CA9BD,EAgCAR,GAAG,0BAAH,CAA+B,UAAM,CACnC,GAAMC,MAAO,4BACVC,MADU,CAET,8CACE,QAAS,yBACP,cAAMC,IAAN,CAAW,CACTC,KAAM,iBADG,CAETW,UAAW,CAAEL,MAAO,QAAT,CAFF,CAGTL,WAAY,MAHH,CAAX,CADO,EADX,kDASE,mGATF,CAFS,EAcVC,MAdU,EAAb,CAeAC,OAAON,IAAP,EAAaO,eAAb,GACD,CAjBD,EAmBAR,GAAG,oBAAH,CAAyB,UAAM,CAC7B,GAAMC,MAAO,4BACVC,MADU,CAET,gDAAS,WAAT,kDACE,8CACE,QAAS,yBACP,cAAMC,IAAN,CAAW,CACTC,KAAM,iBADG,CAETC,WAAY,MAFH,CAAX,CADO,EADX,kDAQE,2GARF,CADF,CAWE,8CACE,YADF,CAEE,QAAS,yBACP,cAAMF,IAAN,CAAW,CACTC,KAAM,iBADG,CAETC,WAAY,MAFH,CAGTW,KAAM,SAHG,CAAX,CADO,EAFX,kDAUE,2GAVF,CAXF,CAuBE,8CACE,YADF,CAEE,QAAS,yBACP,cAAMb,IAAN,CAAW,CACTC,KAAM,iBADG,CAETC,WAAY,MAFH,CAGTW,KAAM,SAHG,CAAX,CADO,EAFX,kDAUE,2GAVF,CAvBF,CAmCE,8CACE,WADF,CAEE,QAAS,yBACP,cAAMb,IAAN,CAAW,CACTC,KAAM,iBADG,CAETC,WAAY,MAFH,CAGTW,KAAM,QAHG,CAAX,CADO,EAFX,kDAUE,0GAVF,CAnCF,CAFS,EAmDVV,MAnDU,EAAb,CAoDAC,OAAON,IAAP,EAAaO,eAAb,GACD,CAtDD","file":"Toast.ios.js","sourcesContent":["import \"react-native\";\r\nimport React from \"react\";\r\nimport renderer from \"react-test-renderer\";\r\nimport { Content } from \"./../../src/basic/Content\";\r\nimport { Button } from \"./../../src/basic/Button\";\r\nimport { Toast } from \"./../../src/basic/Toast\";\r\nimport { Text } from \"./../../src/basic/Text\";\r\n\r\n// Note: test renderer must be required after react-native.\r\nconst cover = require(\"../assets/drawer-cover.png\");\r\n\r\njest.mock(\"Platform\", () => {\r\n  const Platform = require.requireActual(\"Platform\");\r\n  Platform.OS = \"ios\";\r\n  return Platform;\r\n});\r\n\r\nit(\"renders default Toast\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Button\r\n        onPress={() =>\r\n          Toast.show({\r\n            text: \"Wrong password!\",\r\n            buttonText: \"Okay\"\r\n          })\r\n        }\r\n      >\r\n        <Text>Toast</Text>\r\n      </Button>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders Toast button style\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Button\r\n        onPress={() =>\r\n          Toast.show({\r\n            text: \"Wrong password!\",\r\n            buttonText: \"Okay\",\r\n            buttonTextStyle: { color: \"#008000\" },\r\n            buttonStyle: { backgroundColor: \"#5cb85c\" }\r\n          })\r\n        }\r\n      >\r\n        <Text>Toast</Text>\r\n      </Button>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders Toast with duration\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Button\r\n        onPress={() =>\r\n          Toast.show({\r\n            text: \"Wrong password!\",\r\n            buttonText: \"Okay\",\r\n            duration: 3000\r\n          })\r\n        }\r\n      >\r\n        <Text>Toast</Text>\r\n      </Button>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders Toast position\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Content padder>\r\n        <Button\r\n          onPress={() =>\r\n            Toast.show({\r\n              text: \"Wrong password!\",\r\n              buttonText: \"Okay\",\r\n              position: \"top\"\r\n            })\r\n          }\r\n        >\r\n          <Text>Top Toast</Text>\r\n        </Button>\r\n        <Button\r\n          onPress={() =>\r\n            Toast.show({\r\n              text: \"Wrong password!\",\r\n              buttonText: \"Okay\",\r\n              position: \"bottom\"\r\n            })\r\n          }\r\n        >\r\n          <Text>Bottom Toast</Text>\r\n        </Button>\r\n      </Content>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders Toast Text style\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Button\r\n        onPress={() =>\r\n          Toast.show({\r\n            text: \"Wrong password!\",\r\n            textStyle: { color: \"yellow\" },\r\n            buttonText: \"Okay\"\r\n          })\r\n        }\r\n      >\r\n        <Text>Toast</Text>\r\n      </Button>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders Toast Type\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Content padder>\r\n        <Button\r\n          onPress={() =>\r\n            Toast.show({\r\n              text: \"Wrong password!\",\r\n              buttonText: \"Okay\"\r\n            })\r\n          }\r\n        >\r\n          <Text>Default Toast</Text>\r\n        </Button>\r\n        <Button\r\n          success\r\n          onPress={() =>\r\n            Toast.show({\r\n              text: \"Wrong password!\",\r\n              buttonText: \"Okay\",\r\n              type: \"success\"\r\n            })\r\n          }\r\n        >\r\n          <Text>Success Toast</Text>\r\n        </Button>\r\n        <Button\r\n          warning\r\n          onPress={() =>\r\n            Toast.show({\r\n              text: \"Wrong password!\",\r\n              buttonText: \"Okay\",\r\n              type: \"warning\"\r\n            })\r\n          }\r\n        >\r\n          <Text>Warning Toast</Text>\r\n        </Button>\r\n        <Button\r\n          danger\r\n          onPress={() =>\r\n            Toast.show({\r\n              text: \"Wrong password!\",\r\n              buttonText: \"Okay\",\r\n              type: \"danger\"\r\n            })\r\n          }\r\n        >\r\n          <Text>Danger Toast</Text>\r\n        </Button>\r\n      </Content>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n"]}