{"version":3,"sources":["../../../__tests__/basic/Button.ios.js"],"names":["jest","mock","Platform","require","requireActual","OS","it","tree","create","toJSON","expect","toMatchSnapshot"],"mappings":"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","file":"Button.ios.js","sourcesContent":["import { View } from \"react-native\";\r\nimport React from \"react\";\r\nimport renderer from \"react-test-renderer\";\r\nimport { Content } from \"./../../src/basic/Content\";\r\n// import { View } from \"./../../src/basic/View\";\r\nimport { Button } from \"./../../src/basic/Button\";\r\nimport { Text } from \"./../../src/basic/Text\";\r\nimport { Icon } from \"./../../src/basic/Icon\";\r\n\r\n// Note: test renderer must be required after react-native.\r\n\r\njest.mock(\"Platform\", () => {\r\n  const Platform = require.requireActual(\"Platform\");\r\n  Platform.OS = \"ios\";\r\n  return Platform;\r\n});\r\n\r\nit(\"renders regular button\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Content>\r\n        <Button light>\r\n          <Text>Light</Text>\r\n        </Button>\r\n        <Button info>\r\n          <Text>Info</Text>\r\n        </Button>\r\n        <Button primary>\r\n          <Text>Primary</Text>\r\n        </Button>\r\n        <Button success>\r\n          <Text>Success</Text>\r\n        </Button>\r\n        <Button warning>\r\n          <Text>Warning</Text>\r\n        </Button>\r\n        <Button danger>\r\n          <Text>Danger</Text>\r\n        </Button>\r\n        <Button dark>\r\n          <Text>Dark</Text>\r\n        </Button>\r\n      </Content>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders outline button\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Content>\r\n        <Button bordered light>\r\n          <Text>Light</Text>\r\n        </Button>\r\n        <Button bordered info>\r\n          <Text>Info</Text>\r\n        </Button>\r\n        <Button bordered primary>\r\n          <Text>Primary</Text>\r\n        </Button>\r\n        <Button bordered success>\r\n          <Text>Success</Text>\r\n        </Button>\r\n        <Button bordered warning>\r\n          <Text>Warning</Text>\r\n        </Button>\r\n        <Button bordered danger>\r\n          <Text>Danger</Text>\r\n        </Button>\r\n        <Button bordered dark>\r\n          <Text>Dark</Text>\r\n        </Button>\r\n      </Content>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders rounded button\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Content>\r\n        <Button rounded light>\r\n          <Text>Light</Text>\r\n        </Button>\r\n        <Button rounded info>\r\n          <Text>Info</Text>\r\n        </Button>\r\n        <Button rounded primary>\r\n          <Text>Primary</Text>\r\n        </Button>\r\n        <Button rounded success>\r\n          <Text>Success</Text>\r\n        </Button>\r\n        <Button rounded warning>\r\n          <Text>Warning</Text>\r\n        </Button>\r\n        <Button rounded danger>\r\n          <Text>Danger</Text>\r\n        </Button>\r\n        <Button rounded dark>\r\n          <Text>Dark</Text>\r\n        </Button>\r\n      </Content>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders block button\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Content>\r\n        <Button block light>\r\n          <Text>Light</Text>\r\n        </Button>\r\n        <Button block info>\r\n          <Text>Info</Text>\r\n        </Button>\r\n        <Button block primary>\r\n          <Text>Primary</Text>\r\n        </Button>\r\n        <Button block success>\r\n          <Text>Success</Text>\r\n        </Button>\r\n        <Button block warning>\r\n          <Text>Warning</Text>\r\n        </Button>\r\n        <Button block danger>\r\n          <Text>Danger</Text>\r\n        </Button>\r\n        <Button block dark>\r\n          <Text>Dark</Text>\r\n        </Button>\r\n      </Content>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders full button\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <View>\r\n        <Button full light>\r\n          <Text>Light</Text>\r\n        </Button>\r\n        <Button full info>\r\n          <Text>Info</Text>\r\n        </Button>\r\n        <Button full primary>\r\n          <Text>Primary</Text>\r\n        </Button>\r\n        <Button full success>\r\n          <Text>Success</Text>\r\n        </Button>\r\n        <Button full warning>\r\n          <Text>Warning</Text>\r\n        </Button>\r\n        <Button full danger>\r\n          <Text>Danger</Text>\r\n        </Button>\r\n        <Button full dark>\r\n          <Text>Dark</Text>\r\n        </Button>\r\n      </View>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders custom size button\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <View>\r\n        <Button small>\r\n          <Text>Default Small</Text>\r\n        </Button>\r\n        <Button success>\r\n          <Text>Success Default</Text>\r\n        </Button>\r\n\r\n        <Button large dark>\r\n          <Text>Dark large</Text>\r\n        </Button>\r\n      </View>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders transparent button\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Content>\r\n        <Button transparent light>\r\n          <Text>Light</Text>\r\n        </Button>\r\n        <Button transparent info>\r\n          <Text>Info</Text>\r\n        </Button>\r\n        <Button transparent primary>\r\n          <Text>Primary</Text>\r\n        </Button>\r\n        <Button transparent success>\r\n          <Text>Success</Text>\r\n        </Button>\r\n        <Button transparent warning>\r\n          <Text>Warning</Text>\r\n        </Button>\r\n        <Button transparent danger>\r\n          <Text>Danger</Text>\r\n        </Button>\r\n        <Button transparent dark>\r\n          <Text>Dark</Text>\r\n        </Button>\r\n      </Content>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders icon button\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Content>\r\n        <Button iconLeft light>\r\n          <Icon active name=\"arrow-back\" />\r\n          <Text>Back</Text>\r\n        </Button>\r\n        <Button light iconRight>\r\n          <Text>Next</Text>\r\n          <Icon active name=\"arrow-forward\" />\r\n        </Button>\r\n        <Button light>\r\n          <Icon active name=\"arrow-down\" />\r\n        </Button>\r\n        <Button light>\r\n          <Icon active name=\"arrow-up\" />\r\n        </Button>\r\n        <Button iconLeft>\r\n          <Icon active name=\"home\" />\r\n          <Text>Home</Text>\r\n        </Button>\r\n        <Button iconLeft bordered>\r\n          <Icon active name=\"briefcase\" />\r\n          <Text>Work</Text>\r\n        </Button>\r\n        <Button iconLeft success>\r\n          <Icon active name=\"people\" />\r\n          <Text>People</Text>\r\n        </Button>\r\n        <Button iconLeft success bordered>\r\n          <Icon active name=\"paw\" />\r\n          <Text>Animals</Text>\r\n        </Button>\r\n        <Button iconLeft danger>\r\n          <Icon active name=\"close\" />\r\n          <Text>Trash</Text>\r\n        </Button>\r\n        <Button danger bordered>\r\n          <Icon active name=\"trash\" />\r\n        </Button>\r\n        <Button danger transparent>\r\n          <Icon active name=\"trash\" />\r\n        </Button>\r\n        <Button iconLeft warning>\r\n          <Icon active name=\"warning\" />\r\n          <Text>Dont</Text>\r\n        </Button>\r\n        <Button warning bordered>\r\n          <Icon active name=\"warning\" />\r\n        </Button>\r\n        <Button iconLeft info>\r\n          <Icon name=\"alert\" />\r\n          <Text>Help</Text>\r\n        </Button>\r\n        <Button info>\r\n          <Icon name=\"alert\" />\r\n        </Button>\r\n        <Button iconLeft dark>\r\n          <Icon active name=\"cog\" />\r\n          <Text>Settings</Text>\r\n        </Button>\r\n        <Button dark transparent>\r\n          <Icon active name=\"cog\" />\r\n        </Button>\r\n        <Button iconLeft transparent>\r\n          <Icon active name=\"beer\" />\r\n          <Text>Pub</Text>\r\n        </Button>\r\n      </Content>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n\r\nit(\"renders disabled button\", () => {\r\n  const tree = renderer\r\n    .create(\r\n      <Content>\r\n        <Button disabled>\r\n          <Text>Default</Text>\r\n        </Button>\r\n        <Button disabled bordered>\r\n          <Text>Outline</Text>\r\n        </Button>\r\n        <Button disabled rounded>\r\n          <Text>Rounded</Text>\r\n        </Button>\r\n        <Button disabled large>\r\n          <Text>Custom</Text>\r\n        </Button>\r\n        <Button disabled iconRight>\r\n          <Text>Icon Button</Text>\r\n          <Icon name=\"home\" />\r\n        </Button>\r\n        <Button disabled block>\r\n          <Text>Block</Text>\r\n        </Button>\r\n\r\n        <Button disabled full>\r\n          <Text>Full</Text>\r\n        </Button>\r\n      </Content>\r\n    )\r\n    .toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n"]}